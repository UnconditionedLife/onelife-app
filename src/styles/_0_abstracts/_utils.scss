// Colors //

@function color($name, $hue:regular) {
	$value: _color-value($color-palette, $name, $hue);
	@if $value != null {
		@return #{$value};
	}

	$value: _color-value($event-color-palette, $name, $hue);
	@if $value != null {
		@return #{$value};
	}

	$value: _color-value($brand-colors, $name, $hue);
	@if $value != null {
		@return #{$value};
	}

	$value: _color-value($brand-colors-background, $name, $hue);
	@if $value != null {
		@return #{$value};
	}

	@error "Unknown color combination `#{$name}` - `#{$hue}` in color palettes.";
}

@function build-var-name($color, $hue:regular) {
	@return '--color-#{$color}-#{$hue}';
}


// Gradients //

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
$convertable-units: deg grad turn rad;
$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
	@return $value
			/ nth($conversion-factors, index($convertable-units, unit($value)))
			* nth($conversion-factors, index($convertable-units, $unit));
}

@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

@return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
	@if is-direction($value) == false {
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}

	$conversion-map: (
		to top          : bottom,
		to top right    : bottom left,
		to right top    : left bottom,
		to right        : left,
		to bottom right : top left,
		to right bottom : left top,
		to bottom       : top,
		to bottom left  : top right,
		to left bottom  : right top,
		to left         : right,
		to left top     : right bottom,
		to top left     : bottom right
	);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - convert-angle($value, 'deg');
}

@function convert-color-stop($stop) {
	@return get-color(nth($stop, 1)) nth($stop, 2);
}

// Color code generation //

// Build color rules for component css.
// Ex:;
//   build-color-rule('&.thing', primary, dark)
//     generates
//   &.thing-color-primary-dark { @include color(primaty, dark); }
//
@mixin build-color-rule($prefix, $color, $hue:regular, $pseudo-class:'', $suffix:'') {
	$computed-hue: '-#{$hue}';
	@if $hue == 'regular' {
		$computed-hue: '';
	}

	#{$prefix}-color-#{$color}#{$computed-hue}#{$pseudo-class} #{$suffix} {
		@include color(#{$color}, #{$hue});
	}
}
// Ex:;
//   build-background-color-rule('&.thing', primary, dark)
//     generates
//   &.thing-color-primary-dark { @include background-color(primaty, dark); }
//
@mixin build-background-color-rule($prefix, $color, $hue:regular, $pseudo-class:'', $suffix:'') {
	$computed-hue: '-#{$hue}';
	@if $hue == 'regular' {
		$computed-hue: '';
	}

	#{$prefix}-color-#{$color}#{$computed-hue}#{$pseudo-class} #{$suffix} {
		@include background-color(#{$color}, #{$hue});
	}
}

// Ex:;
//   build-border-color-rule('&.thing', primary, dark)
//     generates
//   &.thing-color-primary-dark { @include border-color(primaty, dark); }
//
@mixin build-border-color-rule($prefix, $color, $hue:regular, $pseudo-class:'', $suffix:'') {
	$computed-hue: '-#{$hue}';
	@if $hue == 'regular' {
		$computed-hue: '';
	}

	#{$prefix}-color-#{$color}#{$computed-hue}#{$pseudo-class} #{$suffix} {
		@include border-color(#{$color}, #{$hue});
	}
}

// Ex:;
//   build-outline-color-rule('&.thing', primary, dark)
//     generates
//   &.thing-color-primary-dark { @include border-color(primaty, dark); }
//
@mixin build-outline-color-rule($prefix, $color, $hue:regular, $pseudo-class:'', $suffix:'') {
	$computed-hue: '-#{$hue}';
	@if $hue == 'regular' {
		$computed-hue: '';
	}

	#{$prefix}-color-#{$color}#{$computed-hue}#{$pseudo-class} #{$suffix} {
		@include outline-color(#{$color}, #{$hue});
	}
}

// Link mixin //
// Used to avoid duplication on plain links and link components)
// Unfortunately SASS inheritance causes problems, so it's better to use
// a mixin
@mixin build-anchor-rules($prefix:'') {
	text-decoration: none;
	cursor: pointer;
	@include color(highlight);
	@include font-weight(bold);

	&:visited {
		@include color(highlight);
	}
	&:hover,
	&:focus,
	&:active {
		@include color(primary);
	}

	&.#{$prefix}neutral {
		@include color(text);
		@include font-weight(regular);

		&:hover,
		&:focus,
		&:visited,
		&:active {
			@include color(text);
		}
	}

	&.#{$prefix}highlight {
		@include color(highlight);

		&:hover,
		&:focus,
		&:visited,
		&:active {
			@include color(highlight);
		}
	}

	&.#{$prefix}underline {
		@include color(highlight);
		text-decoration: underline;

		&:hover,
		&:focus,
		&:active {
			@include color(primary);
		}
		&:visited {
			@include color(highlight);
		}
	}
}
